---+ Download OAI repository data and convert to RDF

---++ Requirements:

	* SWI-Prolog 5.8.0
	* Triple20 (GIT version, see
	  http://www.swi-prolog.org/web/Triple20.html

---++ Installation

	* On Unix, edit #!... line in run.pl to point to Prolog
	* In load.pl, edit file_search_path/2 to reflect location of
	  Triple20 sources.
	* In oai.pl, add identifiers and URLs of servers you want to
	  access.

You can (re-)built the documentation on a Unix environment by editing
the #!... line on pltotex.pl and running =make=.  This generates a
LaTeX file from README and the PlDoc comments in the sources and
creates a PDF file from this using =pdflatex=


---++ Running (example uses fontys):

	* Start run.pl
	* To get server identifier, run

		==
		?- sp(fontys).
		==

	* To get records

		==
		?- gr(fontys).
		==

	* To start Triple20 in environment, so you can examine the
	loaded data:

		==
		?- triple20.
		==

	* To generate an RDF file:

		==
		?- rdf_save('fontys.rdf', fontys).
		==

---++ Big repositories

Big repositories typically offer _ResumptionToken_ support that splits
the download into smaller chunks and can restart if an error occurs.
This is supported using oai_crawl/3 in oairdf.pl. Typical usage is below
to crawl all data from a server and store it in the file =|fontys.ttl|=
as Turtle data.

	==
	?- oai_crawl(fontys, 'fontys.ttl', []).
	==

The last argument is a list of options.  The supported options are given
with the source of oai_crawl/3.

If the repository is split into many datasets, one may wish to use

	==
	?- oai_crawl_by_set(fontys, 'fontys.dir', []).
	==

This creates a directory =|fontys.dir|= and a file for each dataset.
See oai_craw_by_set/3 for details and options.


---++ Predicate reference

---+++ Download repositories to a a file

The predicates below are the main predicates for downloading (large)
repositories.

  * [[oai_crawl/3]]
  * [[oai_craw_by_set/3]]

---+++ Explore (small) repositories from memory

These predicates downloads (partial) repositories into memory and allow
to inspect the contents using the Triple20 ontology browser.

  * [[sp/1]]
  * [[gr/1]]
  * [[gr1/1]]
  * [[triple20/0]]
  * [[turtle/1]]

---+++ Customization predicates

  * [[oai_server/2]]

---++ Roadmap

	$ run.pl :
	Toplevel driver
	$ load.pl :
	load the components
	$oai.pl	:
 	AOI HTTP client, calling user hook to process OAI content.
	$ oairdf.pl :
	Uses oai.pl, providing a hook to translate into RDF
	$ t20_extensions.pl :
	Define some extensions to Triple20
	$ oai.rdfs :
	RDFS description of AOI records (partial) used to guide translation.

